#!/usr/bin/env node

/**
 * Calipso command prompt
 * @Params - cmd - server | script | params
 */

/**
* Dependencies on this script
*/
var fs = require('fs'), nodepath = require('path'), exec = require('child_process').exec, step = require('../support/step');

/**
 * Paths
 * path = directory script being run from
 * calipsoPath = calipso library installation path
 **/
var path = fs.realpathSync('.');
var calipsoPath = __dirname + "/../";

/**
 * Main Command router
 */
var appLauncher = {
      command:'server',
      server: { port:3000 },
      script: {
        name:'help',
        params: []
      }
    };

for(var i in process.argv) {
  // Skip the first two - Node and app.js path
  if(i>1) {
    processParam(process.argv[i],i);
  }
}

runLauncher(appLauncher);

/**
 * Run the launcher
 * @param appLauncher
 */
function runLauncher(appLauncher) {

  // Always use current directory?
  console.log('\r\n\x1b[36mLaunching calipso from: \x1b[0m ' + path);
  console.log('\x1b[36mCalipso directory: \x1b[0m ' + calipsoPath);

  // Check if this is a calipso src folder
  if(isLibrary()) {
    console.log('\x1b[1mDo not run this from the calipso library folder, please run from an empty directory or an installed calipso site\x1b[0m\r\n');
    return;
  }

  // Check if this is a calipso site
  if(!isCalipso() && appLauncher.command != 'create-site') {
    console.log('\x1b[1mThis is not a Calipso site - you must run:\x1b[0m calipso create-site SiteName\r\n');
    return;
  }

  switch(appLauncher.command) {
    case 'test':
      runTests(appLauncher.script);
      break;
    case 'server':
      runServer(appLauncher.server.port);
      break;
    case 'create-site':
      createApplication(path,appLauncher.script.params[0]);
      break;
    default:
      appLauncher.command = 'server';
      runServer(appLauncher.server.port);
  }

}

/**
 * Check if we are running from the library folder (or something cloned out of github)
 **/
function isLibrary() {
  return nodepath.existsSync(path + '/bin/calipso');
}

/**
 * Check if .calipso exists
 **/
function isCalipso() {
  return nodepath.existsSync(path + '/.calipso');
}

/**
 * Run a script
 * @param appLauncher
 * Runs by default from path where calipso runs via __dirname.
 */
function runScript(scriptLauncher) {
  var script = require(bootstrapPath + '/scripts/'+ scriptLauncher.name);
  script.execute(scriptLauncher.params,path);
}

/**
 * Process params into array to enable launch
 * @param param
 * @param params
 */
function processParam(param,depth) {

  var paramArray = param.split("=");

  // Run command - must always come after the app
  if(i == 2) {
    appLauncher.command = param;
  }

  // Server.port
  if(paramArray[0] == "server.port" && paramArray[1] != undefined) {
    appLauncher.server.port = paramArray[1];
  }

  //
  if((appLauncher.command == "script" || appLauncher.command == "test") && i == 3) {
    appLauncher.script.name = param;
  }

  // Script params
  if(appLauncher.command == 'script' && i > 3) {
    appLauncher.script.params.push(param);
  }
    
  // Script params
  if(appLauncher.command == 'create-site' && i > 2) {
    appLauncher.script.params.push(param);
  }

}

/**
 * Run expresso tests
 */
function runTests(appLauncher) {

  // var test = appLauncher.name ? appLauncher.name : 'all';
  exec('expresso -I . -s tests/* ', { timeout: 60000, cwd:path }, function (error, stdout, stderr) {
      console.log(stdout);
      console.log(stderr);
  });

}


/**
 * Launch a server
 */
function runServer(port) {


  console.log("");
  console.log("\x1b[36m            _ _                    \x1b[0m");
  console.log("\x1b[36m  ___  __ _| (_)_ __  ___  ___     \x1b[0m");
  console.log("\x1b[36m / __|/ _` | | | '_ \\/ __|/ _ \\  \x1b[0m");
  console.log("\x1b[36m| (__| (_| | | | |_) \\__ \\ (_) | \x1b[0m");
  console.log("\x1b[36m \\___|\\__,_|_|_| .__/|___/\\___/ \x1b[0m");
  console.log("\x1b[36m               |_|                 \x1b[0m");
  console.log("");

  // Ensure we run in the local folder of the application
  process.chdir(path);
  require(path + '/app').boot(function(app) {
    app.listen(port);
    console.log("\x1b[36mCalipso server listening on port: \x1b[0m %d", app.address().port);
    console.log("\x1b[36mCalipso configured for\x1b[0m %s \x1b[36menvironment\x1b[0m\r\n", global.process.env.NODE_ENV || 'development');
  });



}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {

  step(
    function create() {
      var self = this;
      mkdir(path + '/bin',function() {
        copy(calipsoPath + '/bin/install.sh',path + '/bin',self.parallel());
      });
      mkdir(path + '/conf',function() {
        copy(calipsoPath + '/conf/*',path + '/conf',self.parallel());
      });
      mkdir(path + '/i18n',function() {
        copy(calipsoPath + '/i18n/*',path + '/i18n',self.parallel());
      });
      mkdir(path + '/lib',function() {
        copy(calipsoPath + '/lib/*',path + '/lib',self.parallel());
      });
      mkdir(path + '/node_modules',function() {
        copy(calipsoPath + '/node_modules/*',path + '/node_modules',self.parallel());
      });
      mkdir(path + '/modules',function() {
        copy(calipsoPath + '/modules/*',path + '/modules',self.parallel());
      });
      mkdir(path + '/support',function() {
        copy(calipsoPath + '/support/*',path + '/support',self.parallel());
      });
      mkdir(path + '/test',function() {
        copy(calipsoPath + '/test/*',path + '/test',self.parallel());
      });
      mkdir(path + '/themes',function() {
        copy(calipsoPath + '/themes/*',path + '/themes',self.parallel());
      });
      mkdir(path + '/utils',function() {
        copy(calipsoPath + '/utils/*',path + '/utils',self.parallel());
      });
      mkdir(path + '/logs',self.parallel());
      mkdir(path + '/pids',self.parallel());
      mkdir(path + '/media',self.parallel());
      copy(calipsoPath + '/app-cluster.js',path + '/',self.parallel());
      copy(calipsoPath + '/app.js',path + '/',self.parallel());
      copy(calipsoPath + '/package.json',path + '/',self.parallel());
      copy(calipsoPath + '/Makefile',path + '/',self.parallel());      
    },
    function done() {
      write(path + '/.calipso','Created @ ' + new Date());      
      console.log('');
      console.log('\x1b[36mApplication created at: \x1b[0m : ' + path);
      console.log('\x1b[36mRunning install script, please wait ... \x1b[0m');
      runInstall(path)
    }
  )
  
}

function runInstall(path) {
  
  exec('./bin/install.sh', { timeout: 60000, cwd:path }, function (error, stdout, stderr) {
      console.log(stdout);
      console.log(stderr);
  });

}

function createApplication(path,siteName) {  
  var site = path + "/" + siteName;
  mkdir(site,function() {
    emptyDirectory(site, function(empty){
      if (empty) {
        createApplicationAt(site);
      } else {
        confirm('This will over-write the existing site, continue? ', function(ok){
          if (ok) {
            process.stdin.destroy();
            createApplicationAt(site);
          } else {
            abort('aborting');
          }
        });
      }
    });
  });
};

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
  prompt(msg, function(val){
    fn(/^ *y(es)?/i.test(val));
  });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function prompt(msg, fn) {
  // prompt
  if (' ' == msg[msg.length - 1]) {
    process.stdout.write(msg);
  } else {
    console.log(msg);
  }

  // stdin
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data){
    fn(data);
  }).resume();
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  exec('mkdir -p ' + path, function(err){
    if (err) throw err;
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
    fn && fn();
  });
}


/**
 * cp -r
 *
 * @param {String} path
 * @param {Function} fn
 */

function copy(from, to, fn) {
  exec('cp -R ' + from + ' ' + to, function(err){
    if (err) throw err;
    console.log('   \x1b[36mCopied\x1b[0m : ' + to);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
